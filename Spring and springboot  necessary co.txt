Spring and springboot  necessary course:
Spring:
Dependency injection(IoC)
Aspect-Oriented Programmin(AOP)
ModelView Controller (MVC)
Data Access (JDBC,ORM)
Transaction management
Spring Security

Springboot:
Quick dev with standalone Spring APp
Quickly REST full Web services Deployment, Micro Services
Tomacat, Jetty- Embedded Servers
Auto config
Production Ready Feature (Metrics, Health Checks)
Externalized Config, Deploy management
Ready to deploy

Core Java:
1.java prog fundamentals
2. OOps. Collection Framewrok & Excepion Handling

Spring Framework Basics:
1. Dependecy injection(IoC)
2. Aspect Oriented Programming(ASp)
3. Spring Beans (Java Beans)
4. Modules , Components, Folder structure
5. Configuration
6. MVC Architechture

Database Concepts:
1. Basic Understanding iof Databases : SQL, JDBC

Java EE/ Web Contents:
1. Servelet and JSp
2. Http and RESTFUL APi principles

Maven & Gradle:
1. Build tools used in Java Projects

Optional:
Spring Annotations:

Spring MVC:
Spring MVC:
Spring Data JPA or JDBC:3 layers access controil
Spring Security Basics:

Purpose of spring boot:  simplifies the dev of prod-ready spring apps with minm config


Full stackl Dev:
Spring boot3: IOC, DI, dependency management,build tools, maven/gradle,java beans
API/HTTp: Http, restful api, get , post, put, delete, entity
JDBC-MySQL: SQL CURD, JDBC,MySQL Driver
Error Handling: Error Debug, Exception Handling
Springdata JPA: Entities, CRUD Repository, Hibernate, Switching betwn Data Bases
Spring Security: Spring security Architechture. JWT, Securing API
Dev Tools: Eclipse, git, linux, 




Apache Tomcat Server setup in eclipse:
1. Open window>show.. > other> server
2. On server window, click create new server> Apache> newest version of Tomcat> Manual Setup(downloading zip file etc)/Automatic setup
Automatic setup: Download and Install> create a folder and select it. it tomcat will be installed automaticaaly.

Servlet cofig:
ctrl+N >new dynamic web project> tomcat servre+ dynamic web version (latest) + config: default>next>next>generate web xml tick>finish

right click on your project>servlet>package:com.sevletpackage + class name:MyServlet>next>next>finish

starting servlet:
right click on your project>run on server> tomcat 10>next>next>finish
Now it will show 404 error on a browser. write your classname in the url. jakarta will be served.

How to open Ui for servlet without error:
right click on your project>run on server>new>jspfile>dfile name:index.jsp:
it will open an java server pages(normally we dont use in industry, we send it to a UI framework). in there change the title and add paragraph and anchor the url to your class name. Now 404 error will not show and it will directly open in server.

changing the servelet Ui:
in doGet() method, in the .appent include: Served at: MyServlet by Agnila in the string. it will reload the servlet page and refresh with new content

It means successfully executed servlet


weather app:

user>webpage>server(servlet)>server2(api)
user submit some input in the web page. web page sends request to a server.

new dynamic web project>  project name: AgnilaWeatherApp>next>tick generate option>next>finish
right click on AgnilaWeatherApp project> new html file: filename:index.html 

index.html:
add the title and body. in body, add the text and we have input and submit button in the form section.

To submit input and perform action, servlet will read. create servlet class , it will execute on server.
right click on AgnilaWeatherApp project>new>servlet>package: and clas name:

application programming interface: when servlet send request to api, api will send the resonse in json format.
open wather api. in java, setup api, api integration, data retrieve, send the retrieved data to the user

API setup: getting the url of open weather api. so set the apiurl in a stringobject. now in this api, you need an api key and the city name. hence create another two string objects for them. this city will be an input from the user. so create an request of getparam under city stringobject. refer this city stringobject, servlet class and method name in the index.html 

api integration: we have url but we need the connection where we can pass the url param. create url object and pass the apiurl in this object/ hence the apiURL, a string is now transferred in an object now of URL class. now it can make the connection.








